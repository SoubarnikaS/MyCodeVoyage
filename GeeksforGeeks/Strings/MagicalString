Problem Statement :
You are given a string S, convert it into a magical string.
A string can be made into a magical string if the alphabets are swapped in the given manner: a->z or z->a, b->y or y->b, and so on. 
Input:
S = varun
Output:
ezifm
Explanation:
Magical string of "varun" 
will be "ezifm" 
since v->e , a->z , 
r->i , u->f and n->m.

Problem Statement Link :
https://www.geeksforgeeks.org/problems/longest-substring-containing-1/1?utm_source=geeksforgeeks&utm_medium=article_practice_tab&utm_campaign=article_practice_tab

Solution :
class Solution
{
    static String magicalString(String S)
    {
        StringBuilder result = new StringBuilder();
        
        for(int i = 0; i < S.length(); i++)
        {
            int ch = S.charAt(i);
            int diff = (int)ch - 25; // locate the incoming character
            int req = 97 - diff; // gives how far the alphabet is from a
            int ans = req + 97;  // add the distance to a to get the magical character
            result.append((char)ans);
        }
        
        return result.toString();
    }
}
